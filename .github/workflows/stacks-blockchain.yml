name: stacks-blockchain

env:
  SLACK_MESSAGE_ARTIFACT: slack_message_artifact

on:
  push:
    branches:
      - 'master'
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/CHANGELOG.md'
      - '**/package.json'
  pull_request:
  workflow_dispatch:

jobs:
  notify-start:
    runs-on: ubuntu-latest
    steps:
      - name: Notify slack start
        if: success()
        id: slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1.1.2
        with:
          channel: devops-notify
          status: STARTING
          color: warning

      - run: echo ${{ steps.slack.outputs.message_id }} > ${{ env.SLACK_MESSAGE_ARTIFACT }}

      - name: Store Slack Message ID
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.SLACK_MESSAGE_ARTIFACT }}
          path: ${{ env.SLACK_MESSAGE_ARTIFACT }}

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Run bitcoin tests
        env:
          DOCKER_BUILDKIT: 1
        run: docker build -f ./.github/actions/bitcoin-int-tests/Dockerfile.bitcoin-tests .

  dist:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [ windows-x64, macos-x64, linux-x64, linux-musl-x64, linux-armv7, linux-arm64 ]

    steps:
      - uses: actions/checkout@v2

      - name: Build distributable
        env:
          DIST_TARGET_FILTER: ${{ matrix.platform }}
        run: build-scripts/build-dist.sh

      - name: Upload artifact
        # Only upload the artifacts if we're actually pushed to master
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform }}
          path: dist/

  build-publish:
    runs-on: ubuntu-latest
    needs:
      - test
      - dist
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Download distros
        # Only download the artifacts if running against master
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/download-artifact@v2
        with:
          path: dist/

      - name: Delete Slack Artifact
        if: ${{ github.ref == 'refs/heads/master' }}
        run: rm -rf dest/${SLACK_MESSAGE_ARTIFACT}

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2.5.0
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SEMANTIC_RELEASE_PACKAGE: ${{ github.workflow }}
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            semantic-release-slack-bot

      - name: Build/Tag/Push Image
        uses: docker/build-push-action@v1
        with:
          repository: blockstack/${{ github.workflow }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          tags: ${{ steps.semantic.outputs.new_release_version }}
          tag_with_ref: true
          add_git_labels: true
          # Only push if there's a new release on main branch, or if building a non-main branch
          push: ${{ steps.semantic.outputs.new_release_version != '' || github.ref != 'refs/heads/master'}}

  notify-end:
    runs-on: ubuntu-latest
    needs:
      - notify-start
      - build-publish
    if: always()
    steps:
      - name: Retrieve Slack Message ID
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.SLACK_MESSAGE_ARTIFACT }}

      - name: Set Slack Message ID
        run: echo "::set-env name=SLACK_MESSAGE_ID::$(cat ${{ env.SLACK_MESSAGE_ARTIFACT }})"

      - name: Notify slack success
        if: needs.notify-start.result == 'success' && needs.lint.result == 'success' && needs.lint-docs.result == 'success' && needs.build-publish.result == 'success'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1.1.2
        with:
          message_id: ${{ env.SLACK_MESSAGE_ID }}
          channel: devops-notify
          status: SUCCESS
          color: good

      - name: Notify slack fail
        if: needs.notify-start.result == 'failure' || needs.lint.result == 'failure' || needs.lint-docs.result == 'failure' || needs.build-publish.result == 'failure'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1.1.2
        with:
          message_id: ${{ env.SLACK_MESSAGE_ID }}
          channel: devops-notify
          status: FAILED
          color: danger
